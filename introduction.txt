------------- Installing pytest and playwright ------------------
pip install -U pytest
pytest --version
pip install pytest-playwright
playwright install                          
pip install pytest-playwright playwright -U --> update playwright
playwright -V                               --> version of playwright

!!! Test files must have "test_" prefix !!!

-------------- Running a Test ------------
pytest                                          --> runs test in headless mode
pytest --headed                                 --> runs test in headed mode
pytest --browser webkit                         --> runs test in webkit browser
pytest --browser webkit --browser firefox       --> tuns test in webkit and firefox browsers

-----> Run specific tests
pytest test_login.py                                         ---> runs the test file, which named test_login
pytest tests/test_todo_page.py tests/test_landing_page.py    ---> runs 2 test files

!!! DOM = Document Object Model

---------------- CSS Selectors (Locating) -------------------------
[attribute=value]	[target="_blank"]	    Selects all elements with target="_blank"
[attribute^=value]	a[href^="https"]	    Selects every <a> element whose href attribute value begins with "https"
[attribute$=value]	a[href$=".pdf"]	        Selects every <a> element whose href attribute value ends with ".pdf"
[attribute*=value]	a[href*="w3schools"]	Selects every <a> element whose href attribute value contains the substring "w3schools"

---------------- Controlling Tests Headed Step By Step -------------------
With the help of Playwright Inspector, we can use Debug Script. That means,
we can watch and control our tests headed and step by step. For that; 
 
1- write page.pause() in your code, from where you want to control. 
2- go to Terminal and set Playwright Debugger value to 1. --> set PWDEBUG=1
3- run your test 

----------------- Some Useful CLI Commands --------------------------
**pytest -k <test_name>
Example: test_nutella ----> pytest -k nutella 
In this case only the test which named nutella will run.
k --> 'keyword'

**pytest -x 
Stop at the first failure

**pytest --maxfail=2
Stop after two failures

**pytest --lf
Rerun last failed tests only

**pytest --ff 
Rerun all tests starting with failed tests

**pytest --sw, --stepwise 
Exit on test failure and continue from last failing test next time

**pytest --sw-skip, --stepwise-skip
Ignore the first failing test but stop on the next failing test. Implicitly enables --stepwise.

**pytest -s 
Shortcut for --capture=no

**pytest --markers
Show markers (builtin, plugin and per-project ones).

**pytest -m MARKEXPR
Only run tests matching given mark expression.
For example: -m 'mark1 and not mark2'.
For example: -m 'mark1 or mark2'.

**pytest -v, --verbose 
Increase verbosity(TR- ayrinti)

**pytest -q, --quiet
Decrease verbosity(TR- ayrinti)

---> For all pytest CLI commands = pytest -h, --help

CLI(Command-Line-Interface): A command-line interface (CLI) is a means of interacting with a computer program by inputting lines of text called command-lines

-------------------- Recording a Test -----------------
To record a test you should run your test like that:

**pytest -m test2 --video=on --slowmo=500

After that a folder which named 'test-results' will be created
and the whole test will be recorded as video. With --slowmo=500
your test steps will run with 0.5 second interval.


--------------------------- Tracing and Xml Report ---------------------------------
--tracing retain-on-failure --output ./test_results --screenshot only-on-failure --junitxml=./test_results/report.xml

--tracing retain-on-failure --> tracing only if there is any failure      (retain on failure --> TR- basarisizlik durumunda tutmak)
--output --> Directory for artifacts produced by tests, defaults to test-results.
--screenshot only-on-failure --> take screenshot if there is any failure
--junitxml=./test_results/report.xml --> A xml report will be saved under test_results folder

With this line (93) we can take screenshot where the failure is and create and xml report. 
After run the test, you should change directory in command line using 'cd <directory name>' command to the xml report folder
and than you should write 'playawright show-trace trace.zip' on command line. 
You can see all the details about your failed test. A perfect Debug tool!!

----------------------------------- PYTEST_ADDOPTS --------------------------------------
In conftest.py file we can add a new command line command like that;
def pytest_addoption(parser) -> None:
    parser.addoption(
        "--amazon_base_url",
        action = "store",
        default = "https://www.amazon.de/",
        help = "Amazon main page URL"
    )

And if we want to go to this URL before our all tests, we should call this like that;
@pytest.fixture()
def ui_fixture(request, page:Page):
    page.goto(request.config.getoption("--amazon_base_url"))
    .
    .
    .

If we don't want to write some commands in the command line every time we run our tests, we can 
write them in pytest.ini file under addopts title;
addopts = --headed --browser chromium
          --amazon_base_url "https://www.amazon.de/"
          --tracing retain-on-failure --output ./test_results --screenshot only-on-failure --junitxml=./test_results/report.xml

PYTEST_ADDOPTS           Extra command line options

------------------------------- Setting Browser Screen -------------------------
page.set_viewport_size({"width":1000, "height":700})  

So we can set the screeen size values. If we want to know the maximum size of browser screen,
or if we want to know the horizontal and vertical size values of actual browser, we should 
Inspect the page and than go to Console and give this commands:
1- window.innerHeight
2- window.outerHeight
3- window.innerWidth
4- window.outerWidth 